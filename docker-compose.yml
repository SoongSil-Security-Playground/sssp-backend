services:
  fastapi-app:
    container_name: sssp-backend
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "443:443"
    environment:
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_DB: ${MYSQL_DB}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      JWT_TOKEN_EXPIRE_MINUTES: ${JWT_TOKEN_EXPIRE_MINUTES}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
    env_file:
      - .env
    volumes:
      - .:/app
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./init:/docker-entrypoint-initdb.d
    depends_on:
      redis:
        condition: service_healthy
      sssp-database:
        condition: service_healthy
    networks:
      - sssp_network

  sssp-database:
    image: mysql:8.0
    container_name: sssp-database
    ports:
      - "3306:3306"
    environment:
      MYSQL_USER: sssp
      MYSQL_ROOT_PASSWORD: sssppassword
      MYSQL_DATABASE: sssp_database
      MYSQL_PASSWORD: sssppassword
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sssp_network

  redis:
    image: redis:7.2-alpine
    container_name: sssp_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - sssp_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  mysql_data:
  redis_data:

networks:
  sssp_network:
    driver: bridge
